[{"C:\\Users\\Usuario\\final\\React_project_GarciaMarina_MoranteAna_MaidanaKiray\\src\\index.js":"1","C:\\Users\\Usuario\\final\\React_project_GarciaMarina_MoranteAna_MaidanaKiray\\src\\serviceWorker.js":"2","C:\\Users\\Usuario\\final\\React_project_GarciaMarina_MoranteAna_MaidanaKiray\\src\\App.js":"3","C:\\Users\\Usuario\\final\\React_project_GarciaMarina_MoranteAna_MaidanaKiray\\src\\components\\Search.js":"4","C:\\Users\\Usuario\\final\\React_project_GarciaMarina_MoranteAna_MaidanaKiray\\src\\components\\PageNavigation.js":"5"},{"size":248,"mtime":1610469741348,"results":"6","hashOfConfig":"7"},{"size":5003,"mtime":499166100000,"results":"8","hashOfConfig":"7"},{"size":225,"mtime":1610647239183,"results":"9","hashOfConfig":"7"},{"size":10934,"mtime":1610800511826,"results":"10","hashOfConfig":"7"},{"size":934,"mtime":1610789525524,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"16n1tlj",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},"C:\\Users\\Usuario\\final\\React_project_GarciaMarina_MoranteAna_MaidanaKiray\\src\\index.js",[],["26","27"],"C:\\Users\\Usuario\\final\\React_project_GarciaMarina_MoranteAna_MaidanaKiray\\src\\serviceWorker.js",[],"C:\\Users\\Usuario\\final\\React_project_GarciaMarina_MoranteAna_MaidanaKiray\\src\\App.js",[],"C:\\Users\\Usuario\\final\\React_project_GarciaMarina_MoranteAna_MaidanaKiray\\src\\components\\Search.js",["28","29","30","31","32","33","34","35"],"\r\n/*---------------------------------------------------------------------*/\r\n\r\n//Pàgina que mostra la pel·lícula que estem buscant\r\n\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport Loader from '../assets/loading.gif';\r\nimport PageNavigation from './PageNavigation.js';\r\nimport filmDefault from '../assets/filmDefault.jpg';\r\nimport searchIcon from '../assets/searchIcon.png';\r\n\r\n\r\n\r\nclass Search extends React.Component {\r\n    \r\n    constructor (props){\r\n        super(props);\r\n\r\n        // Inicialitzem les variables\r\n        this.startState();\r\n\r\n        this.getPopularFilms();\r\n\r\n        this.cancel= '';\r\n\r\n    }\r\n\r\n    getPageCount = (total, denominator) => {\r\n        const divisible = 0 === total % denominator;\r\n        const valueToBeAdded = divisible ? 0: 1;\r\n        return Math.floor(total/denominator) + valueToBeAdded;\r\n    }\r\n\r\n    \r\n    fetchSearchResults = (updatedPageNum = '', query) =>{\r\n        const pageNumber = updatedPageNum ? `&page=${updatedPageNum}` : '';\r\n        \r\n        const searchUrl = `https://api.themoviedb.org/3/search/movie?api_key=417f399abcc8fa6b50750d4fc444e2fe&language=en-US&query=${query}${pageNumber}`;\r\n\r\n        if(this.cancel){\r\n            this.cancel.cancel();\r\n        }\r\n        \r\n\r\n        this.cancel = axios.CancelToken.source();\r\n\r\n        axios.get(searchUrl, {\r\n            cancelToken: this.cancel.token\r\n        })\r\n            .then(resp=>{\r\n                const total = resp.data.total_results;\r\n                const totalPagesCounter = this.getPageCount(total,20);\r\n                console.log(resp.data);\r\n                const resultNotFound = ! resp.data.results.length ? 'There are no more results.' : '';\r\n            \r\n                this.setState({\r\n                    results: resp.data.results,\r\n                    message: resultNotFound,\r\n                    totalResults: total,\r\n                    totalPages: totalPagesCounter,\r\n                    currentPageNum: updatedPageNum,\r\n                    loading: false,\r\n                    show: false,\r\n                })\r\n                \r\n            })\r\n            .catch(error=>{\r\n                if(axios.isCancel(error) || error ){\r\n                    this.setState({\r\n                        loading: false,\r\n                        message: ' ',\r\n                    })\r\n                }\r\n            } )\r\n    };\r\n\r\n\r\n\r\n    handleOnInputChange = (event) => {\r\n    const query = event.target.value;\r\n        if(!query){\r\n            \r\n// Si no hi ha cap paraula que cercar reiniciem l'objecte, això farà que no es mostri cap resultat i després de fer el resetState tornem a conseguir la llista inicial de popular films \r\n            \r\n            this.resetState();\r\n            this.getPopularFilms();\r\n        }else{\r\n            this.setState({query:query, \r\n                           loading:true, \r\n                           message: '' },  ()=>{\r\n                this.fetchSearchResults(1,query);\r\n            } );\r\n        }\r\n    };\r\n\r\n    handlePageClick = (type,) => {\r\n        const updatedPageNum = 'prev' === type ? this.state.currentPageNum - 1 : this.state.currentPageNum + 1;\r\n        if( ! this.state.loading ){\r\n            this.setState({loading: true, \r\n                           message:'' }, () => {\r\n                this.fetchSearchResults(updatedPageNum, this.state.query);\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    renderSearchResults = () => {\r\n        const {results} = this.state;\r\n        if (Object.keys(results).length && results.length){\r\n            return(\r\n                <div className=\"results-container\">\r\n                    { results.map( result=> {\r\n                        const x = \"https://image.tmdb.org/t/p/w185\";\r\n                        const alttext = \"poster image\";\r\n                        return(\r\n                            \r\n                            <div key={result.id}className=\"result-item\">\r\n                <div className=\"pic-title\">{result.title}</div>\r\n                <div className=\"img-cont\">\r\n                                \r\n                                \r\n                \r\n                                \r\n                                {result.poster_path ? <img className=\"img\" src={x+result.poster_path} alt={result.title+alttext}/> : <img className=\"img\" src={filmDefault} />}\r\n                                <p className=\"cuerpo\">Rating:  {result.vote_average}<br></br><br></br>\r\n                \r\n                                <button class=\"moreinfo\" onClick={()=>{this.changeShow(); this.getResults(result.id)}}>More info</button></p>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    } )}\r\n                </div>\r\n            )\r\n        }\r\n    };\r\n\r\n/*Si no es compleix la primera condició, és a dir, si la imatge té la url de poster_path s'ens mostra la imatge, però si no la té s'ens mostra una imatge que hem triat que posa \"NO IMAGE\"*/\r\n    \r\n    changeShow(){\r\n        this.state.show = true;\r\n    };\r\n\r\n//Aqui obtenim els resultats del Search, és a dir, primer fem el getResults per prendre les dades de la api i quan ja les tenim ho mostrem a la funció showResults. Ho hem fet en dues funcions separades ja que sino ens donava errors. A vegades intentava mostrar els resultats sense haver aconseguit les dades.\r\n\r\n    getResults(url){\r\n        const neourl = `https://api.themoviedb.org/3/movie/${url}?api_key=417f399abcc8fa6b50750d4fc444e2fe&language=en-US`;\r\n\r\n        axios.get(neourl).then(resp=>{\r\n            console.log(resp.data);\r\n            this.setState({\r\n                results2: resp.data,\r\n            })\r\n\r\n            document.body.scrollTop = 0;\r\n            document.documentElement.scrollTop = 0;\r\n\r\n        })\r\n    };\r\n\r\n    showResults(){\r\n        const x = \"https://image.tmdb.org/t/p/w780\";\r\n        const alttext = \"poster image\";\r\n\r\n        return(\r\n            <div itemID=\"objdet\" className={`infowindow ${this.state.show ? 'show' : 'hide'}`}>\r\n            \r\n            <div class=\"box\">\r\n            <img className=\"detailimg\" itemID=\"img\" src={x+this.state.results2.poster_path} alt={this.state.results2.title+alttext}/>\r\n            <div id=\"title\">{this.state.results2.title}</div>\r\n            \r\n            <p></p>\r\n\r\n            <div class=\"infoDetail\">\r\n            <div class=\"titleSynopsis\"> Synopsis: </div>\r\n            <p id=\"synop\">{this.state.results2.overview}</p>\r\n            <div class=\"titleScore\"> Average Score: </div>\r\n            <div><p id=\"score\">{this.state.results2.vote_average}</p></div>\r\n            <div class=\"titleDate\"> Release date: </div>\r\n            <p id=\"release\">{this.state.results2.release_date}</p>\r\n\r\n            <div class=\"buttonHide\">\r\n<button className=\"button\" onClick={()=>{\r\n                this.setState({show:false})\r\n            }}>Hide info</button>\r\n</div>\r\n</div>\r\n            </div>\r\n\r\n            </div>\r\n            \r\n        )\r\n    };\r\n\r\n    render(){\r\n\r\n        const { query, loading, message, currentPageNum, totalPages } = this.state;\r\n        const showPrevLink = 1 < currentPageNum;\r\n        const showNextLink = totalPages > currentPageNum;\r\n        \r\n\r\n        return(\r\n            \r\n            <div className=\"container\">\r\n                /*heading*/\r\n                <div className=\"heading\">\r\n                    <div class=\"title\">HBO</div>\r\n                <label className=\"search-label\" htmlFor=\"search-input\">\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"query\"\r\n                        value={query}\r\n                        id=\"search-input\"\r\n                        placeholder=\"Search...\"\r\n                        onChange={this.handleOnInputChange}\r\n                    />\r\n                    \r\n                </label>\r\n<i className=\"fas fa-search searchIcon\"/>\r\n</div>\r\n                \r\n\r\n                {/*error message*/}\r\n                {message && <p className=\"err-message\">{message}</p>}\r\n\r\n//El que fem aqui es que si la query té més d'un caràcter s'ens mostra el missatge de \"Showing results for...\" i la paraula que estem cercant\r\n\r\n                {/*search message*/}\r\n                {this.state.query.length > 0 && <p className=\"search-message\">Mostrando resultados para '{this.state.query}'...</p>}\r\n\r\n\r\n\r\n\r\n                \r\n                {/*show or hide loading gif*/}\r\n                <img src={Loader} alt=\"loading gif\" className={`loading-gif ${loading ? 'show' : 'hide' } `}/>\r\n\r\n                {/*Navigation*/}\r\n                <PageNavigation\r\n                    loading={loading}\r\n                    showPrevLink={showPrevLink}\r\n                    showNextLink={showNextLink}\r\n                    handlePrevClick={() => this.handlePageClick('prev'/*, event*/)}\r\n                    handleNextClick={() => this.handlePageClick('next'/*, event*/)}\r\n                />\r\n\r\n//Quan s'ha canviat l'estat a show a true, llavors es fa showResults\r\n\r\n                {/*print results */}\r\n                {this.state.show && this.showResults()}\r\n\r\n//Aqui s'ens mostren les \"Popular films\" inicialment però si hem buscat alguna película s'ens mostren els resultats del Search\r\n\r\n                {/* Popular films or Search Results */}\r\n                {this.renderSearchResults()}\r\n\r\n                {/*Navigation*/}\r\n\r\n                <PageNavigation\r\n                    loading={loading}\r\n                    showPrevLink={showPrevLink}\r\n                    showNextLink={showNextLink}\r\n                    handlePrevClick={() => this.handlePageClick('prev'/*, event*/)}\r\n                    handleNextClick={() => this.handlePageClick('next'/*, event*/)}\r\n                />\r\n\r\n            </div>\r\n            \r\n        )\r\n    }\r\n\r\n    resetState(){\r\n        this.setState({\r\n            query: '',\r\n            results:{},\r\n            results2:{},\r\n            loading: false,\r\n            message: '',\r\n            totalResults: 0,\r\n            totalPages: 0,\r\n            currentPageNum: 0,\r\n            show:false,\r\n        });\r\n    }\r\n\r\n    startState(){\r\n        this.state={\r\n            query: '',\r\n            results:{},\r\n            results2:{},\r\n            loading: false,\r\n            message: '',\r\n            totalResults: 0,\r\n            totalPages: 0,\r\n            currentPageNum: 0,\r\n            show:false,\r\n        };\r\n    }\r\n\r\n\r\n//funció que s'utilitza per mostrar la llista  \r\n\r\n    getPopularFilms(){\r\n        const popularFilmsUrl = `https://api.themoviedb.org/3/movie/popular?api_key=417f399abcc8fa6b50750d4fc444e2fe`;\r\n\r\n        axios.get(popularFilmsUrl).then(resp=>{\r\n                this.setState({\r\n                    results: resp.data.results\r\n                })\r\n\r\n            document.body.scrollTop = 0;\r\n            document.documentElement.scrollTop = 0;\r\n            console.log(this.state);\r\n        })\r\n    }\r\n}\r\n\r\nexport default Search;","C:\\Users\\Usuario\\final\\React_project_GarciaMarina_MoranteAna_MaidanaKiray\\src\\components\\PageNavigation.js",["36","37","38"],"//Pàgina per navegar\r\n\r\nimport React from 'react';\r\n\r\nexport default (props) => {\r\n    const{\r\n        loading,\r\n        showPrevLink,\r\n        showNextLink,\r\n        handlePrevClick,\r\n        handleNextClick,\r\n    }= props;\r\n    \r\n    return(\r\n        <div className=\"nav-link-container\">\r\n            <a \r\n                href=\"#\" \r\n                className={\r\n                    `navlink ${showPrevLink ? 'show' : 'hide'}\r\n                    ${loading ? 'greyed-out' : ' '}`\r\n                }\r\n                onClick={handlePrevClick}\r\n            >\r\n                Back\r\n            </a>\r\n\r\n            <a \r\n                href=\"#\" \r\n                className={\r\n                    `navlink ${showNextLink ? 'show' : 'hide'}\r\n                    ${loading ? 'greyed-out' : ' '}`\r\n                }\r\n                onClick={handleNextClick}\r\n            >\r\n                Next\r\n            </a>\r\n        </div>\r\n    )\r\n}",["39","40"],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":11,"column":8,"nodeType":"47","messageId":"48","endLine":11,"endColumn":18},{"ruleId":"49","severity":1,"message":"50","line":125,"column":134,"nodeType":"51","endLine":125,"endColumn":175},{"ruleId":"52","severity":1,"message":"53","line":141,"column":9,"nodeType":"54","endLine":141,"endColumn":19},{"ruleId":"55","severity":1,"message":"56","line":204,"column":40,"nodeType":"57","endLine":206,"endColumn":17},{"ruleId":"55","severity":1,"message":"56","line":224,"column":70,"nodeType":"57","endLine":228,"endColumn":17},{"ruleId":"55","severity":1,"message":"56","line":245,"column":19,"nodeType":"57","endLine":249,"endColumn":17},{"ruleId":"55","severity":1,"message":"56","line":250,"column":56,"nodeType":"57","endLine":254,"endColumn":17},{"ruleId":"52","severity":1,"message":"53","line":287,"column":9,"nodeType":"58","endLine":287,"endColumn":13},{"ruleId":"59","severity":1,"message":"60","line":5,"column":1,"nodeType":"61","endLine":39,"endColumn":2},{"ruleId":"62","severity":1,"message":"63","line":16,"column":13,"nodeType":"51","endLine":23,"endColumn":14},{"ruleId":"62","severity":1,"message":"63","line":27,"column":13,"nodeType":"51","endLine":34,"endColumn":14},{"ruleId":"41","replacedBy":"64"},{"ruleId":"43","replacedBy":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"no-unused-vars","'searchIcon' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","ThisExpression","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["66"],["67"],"no-global-assign","no-unsafe-negation"]